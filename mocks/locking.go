// Code generated by MockGen. DO NOT EDIT.
// Source: locking/locker.go
//
// Generated by this command:
//
//      mockgen -source locking/locker.go -package mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
        context "context"
        reflect "reflect"
        time "time"

        locking "github.com/mauricioabreu/mosaic-video/locking"
        gomock "go.uber.org/mock/gomock"
)

// MockLocker is a mock of Locker interface.
type MockLocker struct {
        ctrl     *gomock.Controller
        recorder *MockLockerMockRecorder
}

// MockLockerMockRecorder is the mock recorder for MockLocker.
type MockLockerMockRecorder struct {
        mock *MockLocker
}

// NewMockLocker creates a new mock instance.
func NewMockLocker(ctrl *gomock.Controller) *MockLocker {
        mock := &MockLocker{ctrl: ctrl}
        mock.recorder = &MockLockerMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocker) EXPECT() *MockLockerMockRecorder {
        return m.recorder
}

// Obtain mocks base method.
func (m *MockLocker) Obtain(ctx context.Context, key string, ttl time.Duration) (locking.Lock, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Obtain", ctx, key, ttl)
        ret0, _ := ret[0].(locking.Lock)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// Obtain indicates an expected call of Obtain.
func (mr *MockLockerMockRecorder) Obtain(ctx, key, ttl any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Obtain", reflect.TypeOf((*MockLocker)(nil).Obtain), ctx, key, ttl)
}

// MockLock is a mock of Lock interface.
type MockLock struct {
        ctrl     *gomock.Controller
        recorder *MockLockMockRecorder
}

// MockLockMockRecorder is the mock recorder for MockLock.
type MockLockMockRecorder struct {
        mock *MockLock
}

// NewMockLock creates a new mock instance.
func NewMockLock(ctrl *gomock.Controller) *MockLock {
        mock := &MockLock{ctrl: ctrl}
        mock.recorder = &MockLockMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLock) EXPECT() *MockLockMockRecorder {
        return m.recorder
}

// Refresh mocks base method.
func (m *MockLock) Refresh(ctx context.Context, ttl time.Duration) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Refresh", ctx, ttl)
        ret0, _ := ret[0].(error)
        return ret0
}

// Refresh indicates an expected call of Refresh.
func (mr *MockLockMockRecorder) Refresh(ctx, ttl any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockLock)(nil).Refresh), ctx, ttl)
}

// Release mocks base method.
func (m *MockLock) Release(ctx context.Context) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Release", ctx)
        ret0, _ := ret[0].(error)
        return ret0
}

// Release indicates an expected call of Release.
func (mr *MockLockMockRecorder) Release(ctx any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockLock)(nil).Release), ctx)
}

// TTL mocks base method.
func (m *MockLock) TTL(ctx context.Context) (time.Duration, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "TTL", ctx)
        ret0, _ := ret[0].(time.Duration)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// TTL indicates an expected call of TTL.
func (mr *MockLockMockRecorder) TTL(ctx any) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TTL", reflect.TypeOf((*MockLock)(nil).TTL), ctx)
}
